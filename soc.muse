#title Самоорганизованная критичность
#author Ярослав Лапин

Лапин Ярослав, СПбГУ, 2010 год.

* Введение
Такое свойство динамических систем, как самоорганизованная критичность
(SOC, self-organized criticality) было предложено в 1987 году и
оказало значительное влияние на многие сферы: математику, экономику,
биологию и конечно же физику (в частности геофизику).

Примером таких систем могут быть песчинки, капельки воды, сеть из
упругих струн, экосистема (зайцы) и даже торговцы на
бирже. Характерная черта этих систем будет то, что элементы этой
системы взаимодействуют друг с другом, причём эти взаимодействия могут
быть описаны очень простым законом (особенно это хорошо видно на
примере клеточных автоматов). Но поведение всей системы в целом будет
уже не таким простым, точно так же, как сложным будет и поведение
системы под действием внешней силы (внешнее поле, например магнитное
или гравитационное).

Для того чтобы понять суть термина self-organized criticality стоит
рассмотреть что значит каждое понятие по отдельности. Термин
self-organization (самоорганизованность) используется для описания
неравновесных систем, которые образуют какую-то устойчивую структуру
(или цикл) в отсутствии внешнего воздействия. Слово criticality
(критичность) используется в описании фазовых переходов, когда
наблюдается следующий эффект. При температуре ровно равной температуре
фазового перехода. В этих условиях внешние воздействия влияют не
только локально (в месте воздействия и плюс ближайшие соседи), но
возмущение распространяется на всю систему (возмущение спадает
линейно, а не экспоненциально с расстоянием). Таким образом
критичность в том, что каждая частица её чувствует влияние каждой
частицы.

Пример, который мы будем рассматривать --- клеточный автомат. Вообще
говоря клеточный автомат это дискретная динамическая система
определённая на каком-то поле. Поведение клеточного автомата полностью
задаётся правилами локального взаимодействия элементов. Одним из
первых клеточных автоматов был автомат Джона фон Неймана, целью этого
автомата была возможность саморепликации. Автомат должен был подобно
автомату Тьюринга решать поставленную перед ним задачу, но сначала
найти ресурсы для создания своей копии. Так как машина Тьюринга
обладает полнотой, то любая задача имеющая алгоритмическое решение
может быть решена с помощью этих автоматов (то есть может исполнять
любую компьютерную программу). Важной задачей в исследовании клеточных
автоматов является поиск задач, которые так же поддаются решению с
помощью них, например задач экологии и криптографии. Возможность
объяснить законы физики кажется очень заманчивой, так как обычно
системы, которые нужно описывать сложны и не дискретны, клеточный
автомат же по определению дискретен и прост для
вычисления. [[http://en.wikipedia.org/wiki/Edward_Fredkin][Edward Fredkin]] предлагает идею, что даже само пространство
и время конечно и дискретно и фундаментальные законы природы можно
описать с помощью клеточных автоматов.

* Пример клеточного автомата

У нас есть двумерное дискретное поле размером N на N. В начальный
момент времени оно заполнено нулями. Через постоянные промежутки
времени в случайную точку падает частица и высота столбика песка в
этой ячейке возрастает на 1 <literal>$$F(i,j)=F(i,j)+1$$</literal>
если в поле появилась ячейка с высотой больше критической (4), то
происходит разрядка этой ячейки <literal>$$F(i,j)=F(i,j)-4$$</literal>
а окружающие 4 ячейки (выше, ниже, левее, правее) получают по одной
песчинке <literal>$$F(i+1,j)=F(i+1,j)+1$$</literal>
<literal>$$F(i-1,j)=F(i-1,j)+1$$</literal>
<literal>$$F(i,j+1)=F(i,j+1)+1$$</literal>
<literal>$$F(i,j-1)=F(i,j-1)+1$$</literal>

Если во время разрядки какая-либо из ячеек превысила критическое
значение, то в ней так же происходит разрядка, то есть все разрядки
произойдут до того, как упадёт следующая частица (до того, как
наступит следующий момент времени). Стоит отметить, что если разрядка
происходит у частицы на границе, то свою энергию она передаёт не
соседним частицам, а она выходит из системы.

* Коробка с песком

Визуально представим поле F размером 30 на 30.

[[sandbox/0000.png][Поле в начальный момент времени]]

В первом изображении мы видим коробку в центре которой находится одна
частица, на следующем изображении показан момент времени, когда в
центре находится 4 частицы, а в следующий момент, когда накопилось 5
частиц и они распались так, что теперь в пяти ячейках находится по
одной частице.

[[sandbox/0003.png][Поле частиц. В центральной ячейке 4 песчинки.]]

[[sandbox/0004.png][Поле частиц. Пять песчинок.]]

Полную версию можно посмотреть [[https://github.com/JLarky/Nonlinear-Dynamics/raw/master/sandbox/intro.avi][тут]]. Для наглядности в данном
эксперименте частицы падали в одно и то же место.

* Эксперимент

В реальном эксперименте распределение по координатам было равномерным
(а не нормальным). Эксперимент проводился в поле размером 20 на 20
ячеек в течение 10 000 ходов. Видео эксперимента можно посмотреть [[https://github.com/JLarky/Nonlinear-Dynamics/raw/master/sandbox/run10k_20x20.avi][тут]]
(38 мегабайт).

Что мы можем понять из этого эксперимента?
 - Можно выделить первый этап, когда поле наполняется частицами, но
   разрядки не происходит (сложно попасть 5 раз в одну ячейку из 400
   равновероятных).
 - Дальше мы видим как начинают происходить время от времени события
   разрядки. Причём их размер (количество разрядок за один момент
   времени можно оценить по том, что за один момент времени меняется
   цвет сразу у нескольких точек находящихся рядом друг с другом) и
   частота (отдалённость по времени между событиями) растут со
   временем.
 - Можно выделить этап, когда события происходят хаотически и скорей
   всего примерно равномерно во времени и по размеру. То есть
   произошло насыщение.

Для того, чтобы можно было судить о развитии системы более конкретно
введём следующую характеристику. Каждый раз при падении частицы, мы
будем считать количество событий разрядки. То есть если после падения
ничего не произошло, то это число 0, если произошла одна разрядка, то
число 1, если N то N (альтернативно этому подходу можно было считать
количество ячеек в которых произошли изменения количества частиц, но
данный подход чуть сложнее в реализации и не был посчитан). Дальше мы
запоминали это число в массиве events[i]=N и так же был массив
аккумулирующий эту величину events_sum[i]=events_sum[i-1]+N. Таким
образом массив events[i] отвечал на вопрос "Сколько событий разрядки
было в момент времени i?", а массив events_sum[i] на вопрос "Сколько
событий разрядки произошло с начала времени и до момента времени i
(включая i)?".

На рисунке 4 приведена зависимость events_sum[i] (вернее её первые
1000 значений) из неё можно видеть, что событий до 600 бросков не было
вообще. И что за 1000 бросков суммарно произошло только 7 событий,
причём последние 2 произошли одновременно (по крайней мере так следует
из графика).

[[images/out_1k.png][Суммарное количество событий. Первые 1000 значений.]]

Дальше мы видим на рисунке 5 дальнейший рост количества событий
(изображены первые 3000 значений). Видно, что событий уже более
9000. На рисунке 6 изображена эта же зависимость в логарифмическом и
двойном логарифмическом масштабе на рисунке 7.

[[images/out_3k.png][Суммарное количество событий. Первые 3000 значений.]]
[[images/out_3kl.png][Суммарное количество событий. Логарифмический масштаб.]]
[[images/out_3kll.png][Суммарное количество событий. Двойной логарифмический масштаб.]]

Из этих графиков можно сделать вывод, что начиная примерно с 1000 и до
2600 рост events_sum был степенными (прямая в двойном логарифмическом
масштабе). Потом этот рост меняет свой характер.

[[images/out_10k.png][Суммарное количество событий. Первые 10000 значений.]]
[[images/out_10kl.png][Суммарное количество событий. Логарифмический масштаб.]]

Из рисунков 8, 9 видно, что произошло насыщение и количество событий
теперь ограничено с одной стороны скоростью попадания новых частиц в
систему, а с другой размерами коробки (частицы выпадают через края, до
которых нужно ещё добраться).

* Гистограммы

Так же для каждого момента времени были построены значения events[i] в
виде гистограмм. Для коробки [[https://github.com/JLarky/Nonlinear-Dynamics/raw/master/sandbox/hist1k_5x5.avi][5 на 5]] была построена гистограмма в
пределах значений events[i] от 1 до 50. И для коробки [[https://github.com/JLarky/Nonlinear-Dynamics/raw/master/sandbox/hist1k_10x10.avi][10 на 10]] в
пределах от 1 до 120. Были выбраны малые размеры, чтобы размеры лавин
были не слишком большими. В целом гистограмма даёт нам представление о
том насколько большие и как часто происходят лавины (несколько событий
разрядки за один момент времени). Ну и как видно --- чаще происходят
события с меньшим количеством разрядок, что и было вполне ожидаемо.

* Вместо заключения

Первым примером клеточного автомата, который я встретил ещё в школе
была [[http://en.wikipedia.org/wiki/Conway's_Game_of_Life][игра Жизнь]].
